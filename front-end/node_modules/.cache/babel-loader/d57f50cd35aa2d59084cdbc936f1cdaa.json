{"ast":null,"code":"'use strict';\n\nvar callBound = require('call-bind/callBound');\n\nvar hasSymbols = require('has-symbols')();\n\nvar hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';\nvar has;\nvar $exec;\nvar isRegexMarker;\nvar badStringifier;\n\nif (hasToStringTag) {\n  has = callBound('Object.prototype.hasOwnProperty');\n  $exec = callBound('RegExp.prototype.exec');\n  isRegexMarker = {};\n\n  var throwRegexMarker = function () {\n    throw isRegexMarker;\n  };\n\n  badStringifier = {\n    toString: throwRegexMarker,\n    valueOf: throwRegexMarker\n  };\n\n  if (typeof Symbol.toPrimitive === 'symbol') {\n    badStringifier[Symbol.toPrimitive] = throwRegexMarker;\n  }\n}\n\nvar $toString = callBound('Object.prototype.toString');\nvar gOPD = Object.getOwnPropertyDescriptor;\nvar regexClass = '[object RegExp]';\nmodule.exports = hasToStringTag // eslint-disable-next-line consistent-return\n? function isRegex(value) {\n  if (!value || typeof value !== 'object') {\n    return false;\n  }\n\n  var descriptor = gOPD(value, 'lastIndex');\n  var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');\n\n  if (!hasLastIndexDataProperty) {\n    return false;\n  }\n\n  try {\n    $exec(value, badStringifier);\n  } catch (e) {\n    return e === isRegexMarker;\n  }\n} : function isRegex(value) {\n  // In older browsers, typeof regex incorrectly returns 'function'\n  if (!value || typeof value !== 'object' && typeof value !== 'function') {\n    return false;\n  }\n\n  return $toString(value) === regexClass;\n};","map":{"version":3,"sources":["C:/Users/박성현/Documents/GitHub/HappyHouse-Guide/front-end/node_modules/is-regex/index.js"],"names":["callBound","require","hasSymbols","hasToStringTag","Symbol","toStringTag","has","$exec","isRegexMarker","badStringifier","throwRegexMarker","toString","valueOf","toPrimitive","$toString","gOPD","Object","getOwnPropertyDescriptor","regexClass","module","exports","isRegex","value","descriptor","hasLastIndexDataProperty","e"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAAP,EAAjB;;AACA,IAAIE,cAAc,GAAGD,UAAU,IAAI,OAAOE,MAAM,CAACC,WAAd,KAA8B,QAAjE;AACA,IAAIC,GAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,aAAJ;AACA,IAAIC,cAAJ;;AAEA,IAAIN,cAAJ,EAAoB;AACnBG,EAAAA,GAAG,GAAGN,SAAS,CAAC,iCAAD,CAAf;AACAO,EAAAA,KAAK,GAAGP,SAAS,CAAC,uBAAD,CAAjB;AACAQ,EAAAA,aAAa,GAAG,EAAhB;;AAEA,MAAIE,gBAAgB,GAAG,YAAY;AAClC,UAAMF,aAAN;AACA,GAFD;;AAGAC,EAAAA,cAAc,GAAG;AAChBE,IAAAA,QAAQ,EAAED,gBADM;AAEhBE,IAAAA,OAAO,EAAEF;AAFO,GAAjB;;AAKA,MAAI,OAAON,MAAM,CAACS,WAAd,KAA8B,QAAlC,EAA4C;AAC3CJ,IAAAA,cAAc,CAACL,MAAM,CAACS,WAAR,CAAd,GAAqCH,gBAArC;AACA;AACD;;AAED,IAAII,SAAS,GAAGd,SAAS,CAAC,2BAAD,CAAzB;AACA,IAAIe,IAAI,GAAGC,MAAM,CAACC,wBAAlB;AACA,IAAIC,UAAU,GAAG,iBAAjB;AAEAC,MAAM,CAACC,OAAP,GAAiBjB,cAAc,CAC9B;AAD8B,EAE5B,SAASkB,OAAT,CAAiBC,KAAjB,EAAwB;AACzB,MAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACxC,WAAO,KAAP;AACA;;AAED,MAAIC,UAAU,GAAGR,IAAI,CAACO,KAAD,EAAQ,WAAR,CAArB;AACA,MAAIE,wBAAwB,GAAGD,UAAU,IAAIjB,GAAG,CAACiB,UAAD,EAAa,OAAb,CAAhD;;AACA,MAAI,CAACC,wBAAL,EAA+B;AAC9B,WAAO,KAAP;AACA;;AAED,MAAI;AACHjB,IAAAA,KAAK,CAACe,KAAD,EAAQb,cAAR,CAAL;AACA,GAFD,CAEE,OAAOgB,CAAP,EAAU;AACX,WAAOA,CAAC,KAAKjB,aAAb;AACA;AACD,CAlB6B,GAmB5B,SAASa,OAAT,CAAiBC,KAAjB,EAAwB;AACzB;AACA,MAAI,CAACA,KAAD,IAAW,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,UAA7D,EAA0E;AACzE,WAAO,KAAP;AACA;;AAED,SAAOR,SAAS,CAACQ,KAAD,CAAT,KAAqBJ,UAA5B;AACA,CA1BF","sourcesContent":["'use strict';\r\n\r\nvar callBound = require('call-bind/callBound');\r\nvar hasSymbols = require('has-symbols')();\r\nvar hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';\r\nvar has;\r\nvar $exec;\r\nvar isRegexMarker;\r\nvar badStringifier;\r\n\r\nif (hasToStringTag) {\r\n\thas = callBound('Object.prototype.hasOwnProperty');\r\n\t$exec = callBound('RegExp.prototype.exec');\r\n\tisRegexMarker = {};\r\n\r\n\tvar throwRegexMarker = function () {\r\n\t\tthrow isRegexMarker;\r\n\t};\r\n\tbadStringifier = {\r\n\t\ttoString: throwRegexMarker,\r\n\t\tvalueOf: throwRegexMarker\r\n\t};\r\n\r\n\tif (typeof Symbol.toPrimitive === 'symbol') {\r\n\t\tbadStringifier[Symbol.toPrimitive] = throwRegexMarker;\r\n\t}\r\n}\r\n\r\nvar $toString = callBound('Object.prototype.toString');\r\nvar gOPD = Object.getOwnPropertyDescriptor;\r\nvar regexClass = '[object RegExp]';\r\n\r\nmodule.exports = hasToStringTag\r\n\t// eslint-disable-next-line consistent-return\r\n\t? function isRegex(value) {\r\n\t\tif (!value || typeof value !== 'object') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar descriptor = gOPD(value, 'lastIndex');\r\n\t\tvar hasLastIndexDataProperty = descriptor && has(descriptor, 'value');\r\n\t\tif (!hasLastIndexDataProperty) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t$exec(value, badStringifier);\r\n\t\t} catch (e) {\r\n\t\t\treturn e === isRegexMarker;\r\n\t\t}\r\n\t}\r\n\t: function isRegex(value) {\r\n\t\t// In older browsers, typeof regex incorrectly returns 'function'\r\n\t\tif (!value || (typeof value !== 'object' && typeof value !== 'function')) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $toString(value) === regexClass;\r\n\t};\r\n"]},"metadata":{},"sourceType":"script"}